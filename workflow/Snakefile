# Snakefile

# Config file
configfile: "config/config.yaml"

input_file = config["input_file"]
project_name = config["project_name"]
metrics = config["metrics"]
libraries = config["libraries"]
tools = config["tools"]
savepath = f"results/{project_name}"

# Gene conversion
gene_converter = f"results/{project_name}/gene_converter.csv"

# ClusterProfiler
keytype = config["keytype"]
organismKEGG = config["organismKEGG"]

# Define result paths based on project name
gsea_output = f"results/{project_name}/syn.{{tool}}.{{metric}}.{{library}}.{project_name}.csv"
combined_output = f"results/{project_name}/syn.combined.{{library}}.{project_name}.csv"

# Generate the outputs based on conditions
clusterprofiler_go_output = expand(gsea_output, metric=metrics, library="GO", tool="clusterProfiler") if "clusterProfiler" in tools and "GO" in libraries else []
clusterprofiler_kegg_output = expand(gsea_output, metric=metrics, library="KEGG", tool="clusterProfiler") if "clusterProfiler" in tools and "KEGG" in libraries else []
gseapy_go_output = expand(gsea_output, metric=metrics, library="GO", tool="gseapy") if "gseapy" in tools and "GO" in libraries else []
gseapy_kegg_output = expand(gsea_output, metric=metrics, library="KEGG", tool="gseapy") if "gseapy" in tools and "KEGG" in libraries else []

all_intermediate_outputs = expand(gsea_output, metric=metrics, library=libraries, tool=tools)
final_outputs = expand(combined_output, library=libraries)

# Define the final target files based on the method selected
rule all:
    input:
        final_outputs,
        all_intermediate_outputs


# Rule for creating gene name converter table
rule run_geneconverter:
    input:
        input_file
    output:
        gene_converter
    conda:
        "envs/environment.clusterprofiler.yaml"
    shell:
        """
        Rscript workflow/scripts/run_geneconverter.R {input} {keytype} {organismKEGG} {gene_converter}
        """

# Rule for running ClusterProfiler
rule run_clusterprofiler:
    input:
        input_file
    output:
        go = f"results/{project_name}/syn.clusterProfiler.{{metric}}.GO.{project_name}.csv" if "clusterProfiler" in tools and "GO" in libraries else "",
        kegg = f"results/{project_name}/syn.clusterProfiler.{{metric}}.KEGG.{project_name}.csv" if "clusterProfiler" in tools and "KEGG" in libraries else ""
    conda:
        "envs/environment.clusterprofiler.yaml"
    shell:
        """
        Rscript workflow/scripts/run_clusterprofiler.R {input} {keytype} {organismKEGG} {gene_converter} {wildcards.metric} {output.go} {output.kegg}
        """

# Rule for running gseapy
rule run_gseapy:
    input:
        input_file
    output:
        go = f"results/{project_name}/syn.gseapy.{{metric}}.GO.{project_name}.csv" if "gseapy" in tools and "GO" in libraries else "",
        kegg = f"results/{project_name}/syn.gseapy.{{metric}}.KEGG.{project_name}.csv" if "gseapy" in tools and "KEGG" in libraries else ""
    conda:
        "envs/environment.yaml"
    shell:
        """
        python workflow/scripts/run_gseapy.py {input} {keytype} {organismKEGG} {gene_converter} {wildcards.metric} {output.go} {output.kegg}
        """


# Rule to combine results
rule combine_results:
    input:
        all_intermediate_outputs
    output:
        final_outputs
    conda:
        "envs/environment.yaml"
    shell:
        """
        python workflow/scripts/combine_results.py {savepath} {final_outputs}
        """